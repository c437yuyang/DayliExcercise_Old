/*
春节期间小明使用微信收到很多个红包，非常开心。在查看领取红包记录时发现，某个红包金额出现的次数超过了红包总数的一半。请帮小明找到该红包金额。写出具体算法思路和代码实现，要求算法尽可能高效。

给定一个红包的金额数组gifts及它的大小n，请返回所求红包的金额。

若没有金额超过总数的一半，返回0。
测试样例：
[1,2,3,2,2],5
返回：2
*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <climits>
#include <cassert>
#include <map>
#include <set>
#include <unordered_map>
using namespace std;
class Gift {
public:

	//笨办法
	int getValue(vector<int> gifts, int n) {
		// write code here
		std::unordered_map<int, int> hist;
		for (auto i : gifts)
			++hist[i];

		for (auto it : hist)
			if (it.second > n / 2)
				return it.first;
		return 0;
	}

	//候选人的办法
	int getValue(vector<int> gifts, int n) {
		// write code here
		int candi = gifts[0];
		int times = 1;
		for (int i = 1; i < n; ++i) {
			if (times == 0) {
				candi = gifts[i];
			} else if (candi == gifts[i]) {
				++times;
			} else {
				--times;
			}
		}
		times = 0;
		for (int i = 0; i < n; ++i) { //最后必须有再检查一遍
			if (gifts[i] == candi) {
				++times;
			}
		}
		return times > n / 2 ? candi : 0;
	}
};

int main() {
	vector<int> v = {
		5026,3463,5590,8864,3330,7548,826,4301,6398,1579,2137,5310,7730,6060,5211,9435,915,7943,8599,432,7306,1673,5350,
		5761,7426,9096,6713,8329,484,6052,3277,9491,9440,4687,1918,9532,927,5006,7146,4953,2983,6224,7544,2629,5631,3759,
		4809,7406,4308,1172,8237,6577,7339,8624,8329,1026,2551,9896,1720,3281,8509,2160,5135,2681,2870,7948,6565,3643,2550,
		5187,5811,8107,6219,5669,2152,2793,8743,750,4513,5570,5137,8043,1863,3256,8905,1565,8793,5775,3867,9276,7836,7753,
		3270,3245,7759,6485,5726,5751,4676,9492,878,9938,6700,9548,8642,497,6242,384,1507,6370,8971,2015,1796,8804,8620,5068,
		6398,1048,7741,8591,5511,1947,189,9018,71,6498,534,5406,1614,4391,1090,750,3712,5748,238,3428,7059,4013,2557,1972,3483,
		2899,7840,3198,1412,3030,6277,5831,1024,7802,5022,3658,8656,8109,836,9098,5496,984,8923,9548,1183,8421,4807,8611,9508,
		9280,2927,1196,4248,6080,5233,2267,2119,1720,4087,5637,2616,8553,5065,8576,184,8891,1027,7992,3217,8987,8760,2003,9553,
		3175,6166,4615,1048,8952,4524,7946,6306,9071,1817,5434,1719,2051,8103,6271,4447,7162,1225,5918,7241,5926,9376,2783,861,
		7090,9460,1441,2305,2365,9873,5420,9066,2486,1584,9143,6563,7049,3095,75,4498,3832,4500,6024,2489,3838,6390,9894,2618,2656,1612,1759,6927,565,531,7148,6857,1511,1801,3917,8839,5978,9783,3484,4282,1901,9503,8964,4582,8639,307,3838,5132,4148,9110,5676,1077,8840,550,8266,6673,1811,5386,946,3746,7837,2312,9583,930,6980,8379,6468,8940,2427,5491,5085,5034,7349,3101,8278,699,6835,8405,8987,1607,8011,2633,5472,7973,1018,5200,8498,9004,106,458,1325,6809,6903,2666,1680,2658,7422,7297,7438,4696,4264,9229,2790,6274,4934,6098,9653,9239,6845,1031,1722,2444,820,9828,6555,5168,9819,1883,4150,7123,5966,3589,6346,1198,714,926,5319,1199,4176,9972,771,771,600,1851,1151,8074,9863,5525,7417,8805,6596,1520,5763,8515,2615,3232,5668,3389,8484,6303,2462,3662,9687,2082,5056,7959,479,1662,4988,4674,8752,1130,3243,6725,1571,6679,5632,5625,1985,6190,9803,1196,577,136,2975,5812,5310,9764,6853,4869,1276,6628,962,6372,3436,3785,6567,7949,1198,833,8231,2482,1766,510,4463,1925,2802,6728,1985,6473,4091,1749,2337,2483,1531,4072,2740,982,6526,5816,8053,576,6252,5187,9786,5359,5093,2627,8359,2456,3358,2399,737,4681,4011,4997,9637,8941,6477,3639,4106,8816,846,867,8916,7476,5995,215,5355,4723,2994,6629,1740,213,4187,1235,2126,8613,6108,7543,7975,4271,4007,641,176,6445,919,8185,6807,7379,3035,1514,643,4903,4322,8287,733,2485,5992,6846,5869,1153
	};
	int n = 485;
	Gift g;
	auto res = g.getValue(v, n);

	return 0;
}




