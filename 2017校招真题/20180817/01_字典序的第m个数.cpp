/*
给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。
对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2.
对于n=200, m=25, 按字典序排列依次为因此第25个数是120…
输入描述:
输入仅包含两个整数n和m。

数据范围:

对于20%的数据, 1 <= m <= n <= 5 ;

对于80%的数据, 1 <= m <= n <= 10^7 ;

对于100%的数据, 1 <= m <= n <= 10^18.
输出描述:
输出仅包括一行, 即所求排列中的第m个数字.
示例1
输入
复制
11 4
输出
复制
2
*/
//将字典序视作一个树，寻找m次则循环m次来找寻结果
//如果在这个区间内则M在这个区间内查找，否则让梯度乘以10向上查找，知道找寻一个区间内，让i+1一个一个查找
//第一步while循环是判断是否查到这个位置，第二次则是写出num在这个区间内有多少个数
//本题不用构造一颗字典序树，却用到树的概念
//以十个十个数为区间计算
//此上均是自己的一点看法，本人不才，望指教
#include <iostream>
#include <algorithm>

using namespace std;

//牛客看到的
int main()
{
	long total, m;
	while (cin >> total >> m)
	{
		long i = 1;
		m--; //下标等于位置减一
		while (m != 0) //直到找到m==0为止，就是要找的数
		{
			long start = i, end = i + 1; //当前区间
			long num = 0; //num是当前区间范围的数量
			while (start <= total) //统计当前区间范围的数
			{
				num += min(total + 1, end) - start;
				start *= 10;
				end *= 10;
			}
			if (num > m) //当前区间的数，大于了要找的第m个数
			{
				i *= 10; //去到下一个子区间，比如从1-2，因为要找的数小于当前区间，比如10个，就去到10里面去
				m--; //m只减1
			}
			else //小于等于m
			{
				m -= num; //相当于是在左边，就减去当前区间的数量
				i++; //去下一个大区间，比如从1到2
			}
		}
		cout << i << endl;
	}
	return 0;

}